"This file is autogenerated by the tool/generate_ast script."

Object subclass: Stmt [
    <comment: 'My instances represent expressions in the Lox abstract syntax tree.'>
]

Stmt subclass: StmtBlock [
    | statements |

    StmtBlock class >> statements: aStatements [
        <category: 'instance creation'>
        ^self new
            statements: aStatements;
            yourself.
    ]

    statements: aStatements [
        <category: 'setter'>
        statements := aStatements.
    ]

    statements [
        <category: 'getter'>
        ^statements.
    ]

    accept: aVisitor [
        ^aVisitor visitBlockStmt: self.
    ]
]

Stmt subclass: StmtExpression [
    | expression |

    StmtExpression class >> expression: anExpression [
        <category: 'instance creation'>
        ^self new
            expression: anExpression;
            yourself.
    ]

    expression: anExpression [
        <category: 'setter'>
        expression := anExpression.
    ]

    expression [
        <category: 'getter'>
        ^expression.
    ]

    accept: aVisitor [
        ^aVisitor visitExpressionStmt: self.
    ]
]

Stmt subclass: StmtIf [
    | condition thenBranch elseBranch |

    StmtIf class >> condition: aCondition thenBranch: aThenBranch elseBranch: anElseBranch [
        <category: 'instance creation'>
        ^self new
            condition: aCondition;
            thenBranch: aThenBranch;
            elseBranch: anElseBranch;
            yourself.
    ]

    condition: aCondition [
        <category: 'setter'>
        condition := aCondition.
    ]

    condition [
        <category: 'getter'>
        ^condition.
    ]

    thenBranch: aThenBranch [
        <category: 'setter'>
        thenBranch := aThenBranch.
    ]

    thenBranch [
        <category: 'getter'>
        ^thenBranch.
    ]

    elseBranch: anElseBranch [
        <category: 'setter'>
        elseBranch := anElseBranch.
    ]

    elseBranch [
        <category: 'getter'>
        ^elseBranch.
    ]

    accept: aVisitor [
        ^aVisitor visitIfStmt: self.
    ]
]

Stmt subclass: StmtPrint [
    | expression |

    StmtPrint class >> expression: anExpression [
        <category: 'instance creation'>
        ^self new
            expression: anExpression;
            yourself.
    ]

    expression: anExpression [
        <category: 'setter'>
        expression := anExpression.
    ]

    expression [
        <category: 'getter'>
        ^expression.
    ]

    accept: aVisitor [
        ^aVisitor visitPrintStmt: self.
    ]
]

Stmt subclass: StmtVar [
    | name initializer |

    StmtVar class >> name: aName initializer: anInitializer [
        <category: 'instance creation'>
        ^self new
            name: aName;
            initializer: anInitializer;
            yourself.
    ]

    name: aName [
        <category: 'setter'>
        name := aName.
    ]

    name [
        <category: 'getter'>
        ^name.
    ]

    initializer: anInitializer [
        <category: 'setter'>
        initializer := anInitializer.
    ]

    initializer [
        <category: 'getter'>
        ^initializer.
    ]

    accept: aVisitor [
        ^aVisitor visitVarStmt: self.
    ]
]

Stmt subclass: StmtWhile [
    | condition body |

    StmtWhile class >> condition: aCondition body: aBody [
        <category: 'instance creation'>
        ^self new
            condition: aCondition;
            body: aBody;
            yourself.
    ]

    condition: aCondition [
        <category: 'setter'>
        condition := aCondition.
    ]

    condition [
        <category: 'getter'>
        ^condition.
    ]

    body: aBody [
        <category: 'setter'>
        body := aBody.
    ]

    body [
        <category: 'getter'>
        ^body.
    ]

    accept: aVisitor [
        ^aVisitor visitWhileStmt: self.
    ]
]
