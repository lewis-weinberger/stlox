"This file is autogenerated by the tool/generate_ast script."

Object subclass: Expr [
    <comment: 'My instances represent expressions in the Lox abstract syntax tree.'>
]

Expr subclass: Binary [
    | left operator right |

    Binary class >> left: aLeft operator: anOperator right: aRight [
        <category: 'instance creation'>
        ^self new
            left: aLeft;
            operator: anOperator;
            right: aRight;
            yourself.
    ]

    left: aLeft [
        <category: 'setter'>
        left := aLeft.
    ]

    left [
        <category: 'getter'>
        ^left.
    ]

    operator: anOperator [
        <category: 'setter'>
        operator := anOperator.
    ]

    operator [
        <category: 'getter'>
        ^operator.
    ]

    right: aRight [
        <category: 'setter'>
        right := aRight.
    ]

    right [
        <category: 'getter'>
        ^right.
    ]

    accept: aVisitor [
        ^aVisitor visitBinary: self.
    ]
]

Expr subclass: Grouping [
    | expression |

    Grouping class >> expression: anExpression [
        <category: 'instance creation'>
        ^self new
            expression: anExpression;
            yourself.
    ]

    expression: anExpression [
        <category: 'setter'>
        expression := anExpression.
    ]

    expression [
        <category: 'getter'>
        ^expression.
    ]

    accept: aVisitor [
        ^aVisitor visitGrouping: self.
    ]
]

Expr subclass: Literal [
    | value |

    Literal class >> value: aValue [
        <category: 'instance creation'>
        ^self new
            value: aValue;
            yourself.
    ]

    value: aValue [
        <category: 'setter'>
        value := aValue.
    ]

    value [
        <category: 'getter'>
        ^value.
    ]

    accept: aVisitor [
        ^aVisitor visitLiteral: self.
    ]
]

Expr subclass: Unary [
    | operator right |

    Unary class >> operator: anOperator right: aRight [
        <category: 'instance creation'>
        ^self new
            operator: anOperator;
            right: aRight;
            yourself.
    ]

    operator: anOperator [
        <category: 'setter'>
        operator := anOperator.
    ]

    operator [
        <category: 'getter'>
        ^operator.
    ]

    right: aRight [
        <category: 'setter'>
        right := aRight.
    ]

    right [
        <category: 'getter'>
        ^right.
    ]

    accept: aVisitor [
        ^aVisitor visitUnary: self.
    ]
]
