"This file is autogenerated by the tool/generate_ast script."

Object subclass: Expr [
    <comment: 'My instances represent expressions in the Lox abstract syntax tree.'>
]

Expr subclass: ExprAssign [
    | name value |

    ExprAssign class >> name: aName value: aValue [
        <category: 'instance creation'>
        ^self new
            name: aName;
            value: aValue;
            yourself.
    ]

    name: aName [
        <category: 'setter'>
        name := aName.
    ]

    name [
        <category: 'getter'>
        ^name.
    ]

    value: aValue [
        <category: 'setter'>
        value := aValue.
    ]

    value [
        <category: 'getter'>
        ^value.
    ]

    accept: aVisitor [
        ^aVisitor visitAssignExpr: self.
    ]
]

Expr subclass: ExprBinary [
    | left operator right |

    ExprBinary class >> left: aLeft operator: anOperator right: aRight [
        <category: 'instance creation'>
        ^self new
            left: aLeft;
            operator: anOperator;
            right: aRight;
            yourself.
    ]

    left: aLeft [
        <category: 'setter'>
        left := aLeft.
    ]

    left [
        <category: 'getter'>
        ^left.
    ]

    operator: anOperator [
        <category: 'setter'>
        operator := anOperator.
    ]

    operator [
        <category: 'getter'>
        ^operator.
    ]

    right: aRight [
        <category: 'setter'>
        right := aRight.
    ]

    right [
        <category: 'getter'>
        ^right.
    ]

    accept: aVisitor [
        ^aVisitor visitBinaryExpr: self.
    ]
]

Expr subclass: ExprGrouping [
    | expression |

    ExprGrouping class >> expression: anExpression [
        <category: 'instance creation'>
        ^self new
            expression: anExpression;
            yourself.
    ]

    expression: anExpression [
        <category: 'setter'>
        expression := anExpression.
    ]

    expression [
        <category: 'getter'>
        ^expression.
    ]

    accept: aVisitor [
        ^aVisitor visitGroupingExpr: self.
    ]
]

Expr subclass: ExprLiteral [
    | value |

    ExprLiteral class >> value: aValue [
        <category: 'instance creation'>
        ^self new
            value: aValue;
            yourself.
    ]

    value: aValue [
        <category: 'setter'>
        value := aValue.
    ]

    value [
        <category: 'getter'>
        ^value.
    ]

    accept: aVisitor [
        ^aVisitor visitLiteralExpr: self.
    ]
]

Expr subclass: ExprLogical [
    | left operator right |

    ExprLogical class >> left: aLeft operator: anOperator right: aRight [
        <category: 'instance creation'>
        ^self new
            left: aLeft;
            operator: anOperator;
            right: aRight;
            yourself.
    ]

    left: aLeft [
        <category: 'setter'>
        left := aLeft.
    ]

    left [
        <category: 'getter'>
        ^left.
    ]

    operator: anOperator [
        <category: 'setter'>
        operator := anOperator.
    ]

    operator [
        <category: 'getter'>
        ^operator.
    ]

    right: aRight [
        <category: 'setter'>
        right := aRight.
    ]

    right [
        <category: 'getter'>
        ^right.
    ]

    accept: aVisitor [
        ^aVisitor visitLogicalExpr: self.
    ]
]

Expr subclass: ExprUnary [
    | operator right |

    ExprUnary class >> operator: anOperator right: aRight [
        <category: 'instance creation'>
        ^self new
            operator: anOperator;
            right: aRight;
            yourself.
    ]

    operator: anOperator [
        <category: 'setter'>
        operator := anOperator.
    ]

    operator [
        <category: 'getter'>
        ^operator.
    ]

    right: aRight [
        <category: 'setter'>
        right := aRight.
    ]

    right [
        <category: 'getter'>
        ^right.
    ]

    accept: aVisitor [
        ^aVisitor visitUnaryExpr: self.
    ]
]

Expr subclass: ExprVariable [
    | name |

    ExprVariable class >> name: aName [
        <category: 'instance creation'>
        ^self new
            name: aName;
            yourself.
    ]

    name: aName [
        <category: 'setter'>
        name := aName.
    ]

    name [
        <category: 'getter'>
        ^name.
    ]

    accept: aVisitor [
        ^aVisitor visitVariableExpr: self.
    ]
]
