#!/bin/sh
"exec" "gst" "-af" "$0" "$@"

Object subclass: GenerateAST [
    <comment: 'My instances can be used as a tool to automate the generation of
class code for different types of node in the Lox abstract syntax tree'>

    run: args [
        "Run the generator with the provided commandline arguments"

        <category: 'main'>
        | outputDir |
        args size = 1
            ifTrue: [ outputDir := args at: 1 ]
            ifFalse: [
                'Usage: generate_ast [output directory]' displayNl.
                 ^ObjectMemory quit: 64
            ].

        self
            defineAST: outputDir
            base: 'Expr'
            types: #('Assign: name value'
                     'Binary: left operator right'
                     'Grouping: expression'
                     'Literal: value'
                     'Logical: left operator right'
                     'Unary: operator right'
                     'Variable: name').
        self
            defineAST: outputDir
            base: 'Stmt'
            types: #('Block: statements'
                     'Expression: expression'
                     'If: condition thenBranch elseBranch'
                     'Print: expression'
                     'Var: name initializer'
                     'While: condition body').
    ]

    defineAST: outputDir base: baseName types: typeList [
        "Generate the class code for the provided base and type list."

        <category: 'generator'>
        | path writer split class fields|
        path := outputDir , '/' , baseName , '.st'.
        writer := FileStream open: path mode: FileStream write.

        writer
            nextPutAll: '"This file is autogenerated by the tool/generate_ast script."';
            nl;
            nl;
            nextPutAll: 'Object subclass: ' , baseName , ' [';
            nl;
            space: 4;
            nextPutAll: '<comment: ''My instances represent expressions in the Lox abstract syntax tree.''>';
            nl;
            nextPutAll: ']'.

        typeList do: [ :type |
            split := type tokenize: ':'.
            class := split at: 1.
            fields := split at: 2.
            self defineType: writer base: baseName class: class fields: fields.
        ].
        writer
            nl;
            close.
    ]

    defineType: writer base: baseName class: className fields: fieldList [
        "Generate the class code for the provided field list."

        <category: 'generator'>
        | fields a c capitals |
        fields := (fieldList trimSeparators) tokenize: ' '.
        capitals := Dictionary new.
        fields do: [ :field |
             c := field copy.
             c at: 1 put: (field at: 1) asUppercase.
             a := (c at: 1) isVowel ifTrue: [ 'an' ] ifFalse: [ 'a' ].
             capitals at: field put: (a , c).
        ].

        writer
            nl;
            nl;
            nextPutAll: baseName , ' subclass: ' , baseName , className , ' [';
            nl;
            space: 4;
            nextPutAll: '|' , fieldList , ' |';
            nl;
            nl;
            space: 4;
            nextPutAll: baseName , className , ' class >> '.

        fields do: [ :field |
            writer nextPutAll: field , ': ' , (capitals at: field) , ' '.
        ].

        writer
            nextPutAll: '[';
            nl;
            space: 8;
            nextPutAll: '<category: ''instance creation''>';
            nl;
            space: 8;
            nextPutAll: '^self new';
            nl.

        fields do: [ :field |
            writer
                space: 12;
                nextPutAll: field , ': ' , (capitals at: field) , ';';
                nl.
        ].

        writer
            space: 12;
            nextPutAll: 'yourself.';
            nl;
            space: 4;
            nextPutAll: ']';
            nl.

        fields do: [ :field |
            writer
                nl;
                space: 4;
                nextPutAll: field , ': ' , (capitals at: field) , ' [';
                nl;
                space: 8;
                nextPutAll: '<category: ''setter''>';
                nl;
                space: 8;
                nextPutAll: field , ' := ' , (capitals at: field) , '.';
                nl;
                space: 4;
                nextPutAll: ']';
                nl;
                nl;
                space: 4;
                nextPutAll: field , ' [';
                nl;
                space: 8;
                nextPutAll: '<category: ''getter''>';
                nl;
                space: 8;
                nextPutAll: '^' , field , '.';
                nl;
                space: 4;
                nextPutAll: ']';
                nl.
        ].

        writer
            nl;
            space: 4;
            nextPutAll: 'accept: aVisitor [';
            nl;
            space: 8;
            nextPutAll: '^aVisitor visit' , className , baseName , ': self.';
            nl;
            space: 4;
            nextPutAll: ']';
            nl;
            nextPutAll: ']'.
    ]
]

GenerateAST new run: (Smalltalk arguments)
